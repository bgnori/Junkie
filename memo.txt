

project name junkie
廃人

Goal
 非同期書き込み非同期読み込み、重複contentなしのtumblr client


作る話:
 pythonを使う
 なんでもいいのだがプラットフォームを選ぶのは嫌だ。
  Qt, wxpython とかか？

 - Downloading PyQt-x11-gpl-4.8.6.tar.gz (9.7Mb): 9.7Mb downloaded
  packagingがおかしくてinstallに失敗する。

 - wxpythonをyumでinstall してwx htmlとか



同期でsingle windowのclientを試作する。


pumblrはいいのかもしれないが、非同期じゃない。
modelの部分を作るためにtubmrl apiを理解する上で読むのはおおいにあり。
=> かなりシンプル。


http://www.tumblr.com/docs/en/api
http://lxml.de/xpathxslt.html

xmlを連結し、styleを入れてブラウザでレンダリングというモデルにするのか,
それともpostごとにレンダリングしてpaneとみなすべきなのか。


renderするときに使うデータをprefetchすればいい。
別processにする？fetcherともいうべきかな
ローカルのファイルもしくはメモリで保持。

 方針：
  - requestに充分先行してfetchをかける。
  - requestしたときに手元にないものは諦める。

 - requestしたものが使えるようになるまでの時間を記録して予測に使えるようにすべきだろう。
  ざっくりと見た感じでは、
   xx.media.tumblrは速い。1s以内 i.e. 25.media.tumblr.com => akamai.
   www.tumblr.com/photo...は遅い。 => 本家
  とりあえず3秒前に読み込め。

 - wx.html.windowの仕様でfileからしかimgを読み込めないようだ。
   とりあえずメモリ渡しはできないように見える。
   
 - renderを作るのがよいか？


twitterのpicsはa hrefで参照されているがこれも解決してembedするほうがよいだろう。
-> そういうことはいっぱいあるのではないか？
 need to name this idea. expand?

htmlのsubsetだが相当「方言」になるなぁ。mark upとして整ってもいないだろう。


fetchするときのUAとかAcceptとか・・・まああとでいいでしょう。


postのidでpostをdictにほうりこんで管理。
time-stampでも管理したい。(シーケンシャルな取得)
 heapqにするか？


Junkie's Guideにいれること。
http://www.kurihama-alcoholism-center.jp/tiar/


twisted.webにあるproxyを起点にするのが良さそう。



----------------------------------------
in proxy.py
from twisted.web import proxy, http
class ProxyFactory(http.HTTPFactory):
    protocol = proxy.Proxy
----------------------------------------
in twisted/web/proxy.py
class Proxy(HTTPChannel):
    requestFactory = ProxyRequest
----------------------------------------
うーん、HTTPChannel classがもっているclass memberをみたほうが良さそう。
----------------------------------------
親クラスは、LineReceiver

http://twistedmatrix.com/documents/11.0.0/api/twisted.protocols.basic.LineReceiver.html
A protocol that receives lines and/or raw data, depending on mode.

In line mode, each line that's received becomes a callback to lineReceived. In
raw data mode, each chunk of raw data becomes a callback to rawDataReceived.
The setLineMode and setRawMode methods switch between the two modes.


さらに元をたどると、IProtocolを実装している。
http://twistedmatrix.com/documents/11.0.0/api/twisted.internet.interfaces.IProtocol.html
IProtocol(Interface)
def dataReceived(data): (source) 
def connectionLost(reason): (source) 
def makeConnection(transport): (source)
def connectionMade(): (source)

call graphのようなものが欲しいのだが・・・


class Request:
    def requestReceived(self, command, path, version):
   	... 
        self.process()

class ProxyRequest(Request):
    def process(self):
が差分。


        class_ = self.protocols[protocol]
        clientFactory = class_(self.method, rest, self.clientproto, headers,
                               s, self)

とかなんだろう？
protocolは'http'という文字列。
    protocols = {'http': ProxyClientFactory}
なので、ProxyFactoryをみればいい。



class ProxyClientFactory(ClientFactory):
    protocol = ProxyClient
で大半はProxyClient転送されている。
ProxyClient自体に手をいれるのではなく、継承してPrefetchProxyClientでも実装して、
ごにょごにょですかね。
=>> ProxyRequestのようだ。


手を入れたときのログ。 stdout自体がhookされている模様。

2011-11-19 19:46:42+0900 [-] Log opened.
2011-11-19 19:46:42+0900 [-] __main__.PrefetchProxyFactory starting on 8080
2011-11-19 19:46:42+0900 [-] Starting factory <__main__.PrefetchProxyFactory instance at 0x191ff38>
2011-11-19 19:46:50+0900 [PrefetchProxy,0,127.0.0.1] http://www.tumblr.com/dashboard
2011-11-19 19:46:50+0900 [PrefetchProxy,0,127.0.0.1] www.tumblr.com
2011-11-19 19:46:50+0900 [PrefetchProxy,0,127.0.0.1] plug in
2011-11-19 19:46:50+0900 [PrefetchProxy,0,127.0.0.1] Starting factory <__main__.PrefetchProxyClientFactory instance at 0x1d29320>
2011-11-19 19:46:51+0900 [PrefetchProxyClient,client] 127.0.0.1 - - [19/Nov/2011:10:46:50 +0000] "GET http://www.tumblr.com/dashboard HTTP/1.1" 200 13464 "http://www.tumblr.com/tagged/animals" "Mozilla/5.0 (X11; Linux x86_64; rv:8.0) Gecko/20100101 Firefox/8.0"
2011-11-19 19:46:51+0900 [PrefetchProxyClient,client] Stopping factory <__main__.PrefetchProxyClientFactory instance at 0x1d29320>


「コンピュータサイエンスに難問は二つしかない。それは概念に名前をつけることと、キャッシュの失効である」
- Phil Karlton
There is also a variation on this that says there are two hard things in
computer science: cache invalidation, naming things, and off-by-one errors.


あ・・・postfixの設計間違えた。
おとなしく正規表現にしておけばよかった。
てかやりすぎ。


dashboardをサポートしたい。

junkie.pyにprefetchの指示を生成する機能を入れるべきかな？
ajaxのrequestにhookすればよさげ
 "GET http://abacus.tumblr.com/check_for_new_posts/a0146229bf7e844f190e2fcaecc47ab9.js?1321833330624 HTTP/1.1" 
 200 26 "http://www.tumblr.com/dashboard" "Mozilla/5.0 (X11; Linux x86_64; rv:8.0) Gecko/20100101 Firefox/8.0"

これはplugins/tumblr.pyのほうがよいのか？
 a) junkie.pyだとprocess間通信が発生
 b) plugin内だと/api/readを待つのが困る。
b)は致命的。

postの情報を追記で溜め込むのでcontrolが必要。

jsのcodeを見ると、こんな感じなので10分に一回か、一分に一回チェックしている
      this request genereted by following code in dashboard.html:
        var check_for_new_posts_url = 'http://abacus.tumblr.com/check_for_new_posts/a0146229bf7e844f190e2fcaecc47ab9.js';
        check_for_new_posts(60000);
time.time()の差を見る限り、90秒ごとに見える。


/api/dashboard, /api/write対応
POST queryに含まれる認証情報を吸い出す
 email
 password
 => 最初のloginを捕まえないとだめ。なのでcookieを覗き見る

 generator: これは別途必要。

postの内容は不明だが、これで名前をチェックする。
http://www.tumblr.com/check_if_tumblelog_name_is_available


      client.getPage('http://www.tumblr.com/dashboard', headers=myheaders)\
はheaderを任意に指定できるくせに、responseじゃなくて、bodyだけをCallbackに渡す。

getPageのかわりにgetResponseをhackする。
bodyをうまく処理できないので、downloadPageを使ったら、今度はheaderがこわされるらしく、login扱いにならない。


class HTTPPageGetter(http.HTTPClient):
の
    def connectionMade(self):
で、
            if key.lower() not in self._specialHeaders:
                # we calculated it on our own
                self.sendHeader(key, value)
とか・・・
    _specialHeaders = set(('host', 'user-agent', 'cookie', 'content-length'))
である。
hostはともかく、uaとcookieが書き換わっている。
爆発しろ

browserで/api/dashboardにいってもgetなので蹴られる。



- urlは http://www.tumblr.com/api/dashboard
- methodはPOSTを使う。
- email/password

wiresharkで見た.getPageはContent-Type headerを自動では付けてくれない!
 headers = {'Content-Type': 'application/x-www-form-urlencoded'},


v2だとOAuthを使う。移行するか？
-> Web applicationならともかく、desktopアプリでどのくらい意味があるのか？
--> 古いAPIが使えなくなるならともかく・・・

preferchだけでなく、misしたものもデータが届き次第cacheに入れるようにする。
dashboardのhtml自体もprefetch/cacheする。必要ならlocalで再構築する、endless scrollに対応する。
packaging
 - depotの下じゃなくてpluginsの下にデータを入れる？
 - 古いデータは消すなり固めるなりしないと、dirの下のfile数が増えすぎる
Applicationを作る方向に戻る？
 Qtが入らないのをどうするねん。
 今時tkはありえないし... browserがないのは辛いだろう。
 外部のplayer(audio/video)を動かしてみたい。

振り返ってみてどうなのか。
 どこでまずい判断をしたのか。
 どこでよい判断をしたのか。


plugins/media-tumblr.py
def process(request):
  print 'plugin: media-tumblr is serving'
  cached = server.get(request.uri)
  if not cached:
    cm = CacheMissHelper(request)

ここでcachedのかわりにdeferredを返すとどうなのか？
もしくはcachedかdeferredにする。

deferredがprocessをまたいでしまう(orz)
cache と proxyを統合する？

deferredをとることができると、すべてcacheにあった扱いにできる。
fetch中にrequestがきた場合も統合できそう。
これならQueueとかpoolがいらない。

proxyとcacheが分離しているメリットは？
rep? blockingの回避

file IO

sigle processというbranchを切った。
cacheのprocessを廃止する方向で。
storageを作って保持させるタイミングが分からない。
Proxyを実体化させるときか？
あとhandler側どのように触ることができるのか？


timingはallContentReceivedの直後にrequestに対して
Cacheのインスタンスを渡すなりするのがよさげだが、
requestをとれない. channelのqueueから削除されてしまう。
allHeadersReceivedならqueueのケツにいる。

Channelインスタンス(PrefetchProxyClientの祖先)


とりあえず動くようになったが、なんか画像ファイルが壊れる。とくにpng
https://github.com/bgnori/Junkie/commit/5cd13327ae66d4d7e8b167f9bdc64036620de8a0
content-encodingがらみでなにかやらかしているらしい。
==> なんか変なif文があった orz


getPageでは
http status code 302とかをhandleできない。


ticketとDataFileをなんとかする。
k

振り返ってみてどうなのか。
 どこでまずい判断をしたのか。
 どこでよい判断をしたのか。
前回は11/23
11/29-12/9の間、止まっていた。
-> deferredがらみのtypoが発見できなかった。

REPに問題がある。エラーから原因が分からなかった。
if文で隠蔽が起こっていた。
プログラムの実行モデル変更は大きい
初期の方針が微妙だったが、どうにもならなかった面もある。
pluginもやりすぎ。

現状正しい方向に向かっているといえるか？ => Yes.

dashboardのレンダリング
- Pythonでrenderingする
 + Genshiを使う
- XSLTを使う(lxml.etreeで処理)
 + http://symphony-cms.com/download/xslt-utilities/view/20746/
 + https://gist.github.com/107037
  出力結果はざっくり。
  saved as tumblr.xslt

とりあえず、dashboard.xmlをそれなりにフォーマットして出力するめどが立った。
tumblr/__init__.py化
render, tumblr.py as model.pyを移動

cacheのentryのうちmemoryにもつものに上限数を用意する。 => RLUをheapつかって実装
postのdbを作る。
reblog-graphは別に持つ(被relobgのpostの本体をすべてもてるわけではないから。

Quality Goal
 - 循環的複雑度 under 10. 
 - Coverage over 90%
 - pylintに文句を言われないこと。



2011-12-15 10:30:52+0900 [HTTPPageGetter,client] purged cache life=1323912652.320562 s for http://27.media.tumblr.com/tumblr_lw818dmUXc1qztgb6o1_75sq.png
==> fixed

How to fixs this?
	  File "/home/nori/Desktop/work/tumblr/mypython/lib/python2.6/site-packages/twisted/web/http.py", line 866, in finish
	    "Request.finish called on a request after its connection was lost; "
	exceptions.RuntimeError: Request.finish called on a request after its connection was lost; use Request.notifyFinish to keep track of this.


cacheの実装をAVLからordereddictに変更する？
http://pypi.python.org/pypi/ordereddict/
nthにtouchすることがあるのでダメかも。
-> keyで削除するから変える。
順序再度作り直すコトができるわけではないようだ。

Postを保持するAkashicRecordはなにで実装するか？
 - ordereddict  APIとしてSequencialなアクセスを許していない。 => SequenceDictとでもしてAPIを追加する？
 - B木 実装が・・
 - bsddb python3でなくなるので使いたくない
 - sqlite  + twisted.enterprise.adbapi 
 - CouchDB 大げさ

http://togetter.com/li/228938

reblog_keyが謎なので、ちょっと調べる。
http://www.tumblr.com/reblog/14426644596/xh1tGS37?redirect_to=%2Fdashboard

-key="uZt9U11m"
-key="uZt9U11m"


<post id="14163091399" url="http://nemoi.tumblr.com/post/14163091399" url-with-slug="http://nemoi.tumblr.com/post/14163091399/nike-zoom-kd-iv-nerf-edition-release-info" type="photo" date-gmt="2011-12-13 11:53:01 GMT" date="Tue, 13 Dec 2011 20:53:01" unix-timestamp="1323777181" format="html" reblog-key="kxxq0Mfa" slug="nike-zoom-kd-iv-nerf-edition-release-info" tumblelog="nemoi" note-count="0" width="570" height="450">
<tumblelog title="nemoi memo" name="nemoi" url="http://nemoi.tumblr.com/" timezone="Asia/Tokyo" avatar-url-16="http://27.media.tumblr.com/avatar_fc6c487e6013_16.png" avatar-url-24="http://29.media.tumblr.com/avatar_fc6c487e6013_24.png" avatar-url-30="http://26.media.tumblr.com/avatar_fc6c487e6013_30.png" avatar-url-40="http://30.media.tumblr.com/avatar_fc6c487e6013_40.png" avatar-url-48="http://30.media.tumblr.com/avatar_fc6c487e6013_48.png" avatar-url-64="http://28.media.tumblr.com/avatar_fc6c487e6013_64.png" avatar-url-96="http://25.media.tumblr.com/avatar_fc6c487e6013_96.png" avatar-url-128="http://25.media.tumblr.com/avatar_fc6c487e6013_128.png" avatar-url-512="http://24.media.tumblr.com/avatar_fc6c487e6013_512.png"/>

14163091399
 1323777181

kxxq0Mfa

*.tumblr.comのうち、運営が使っている物。
www, 
assets, cssとか
static,  
data, 
abacus,  新たなpost到着を知らせるjsonp用
platform,  +ボタン用

http://otsune.tumblr.com/post/1018849069/twitter-api-statusid-tumblr-postid-s
Twitter互換APIで取得できるStatusIDは、TumblrのPostIDとは異なる。が、StatusIDを右へ16bitシフトするとPostIDになる。


http://d.hatena.ne.jp/gkojax/20111129
例えば、http://eri-eri-kamei-eri.tumblr.com/post/13395547613とhttp://mcsgsym.tumblr.com/post/13501396948のデータをAPIから取得するとreblog_keyが一緒になっている。そのため、１つのreblog_keyに複数のポストが紐づいているような感じで。reblogsとpostsは１対多になる。



<post id="14163011649" url="http://nemoi.tumblr.com/post/14163011649" url-with-slug="http://nemoi.tumblr.com/post/14163011649/1oyenmanzyu" type="photo" date-gmt="2011-12-13 11:48:22 GMT" date="Tue, 13 Dec 2011 20:48:22" unix-timestamp="1323776902" format="html" reblog-key="uZt9U11m" slug="1oyenmanzyu" tumblelog="nemoi" note-count="24" reblogged-from-url="http://ta3jpn.tumblr.com/post/14162791675/1oyenmanzyu" reblogged-from-name="ta3jpn" reblogged-from-title="ta3jpn.tumblr" reblogged-from-avatar-url-16="http://30.media.tumblr.com/avatar_60558c779fa4_16.png" reblogged-from-avatar-url-24="http://26.media.tumblr.com/avatar_60558c779fa4_24.png" reblogged-from-avatar-url-30="http://29.media.tumblr.com/avatar_60558c779fa4_30.png" reblogged-from-avatar-url-40="http://26.media.tumblr.com/avatar_60558c779fa4_40.png" reblogged-from-avatar-url-48="http://25.media.tumblr.com/avatar_60558c779fa4_48.png" reblogged-from-avatar-url-64="http://25.media.tumblr.com/avatar_60558c779fa4_64.png" reblogged-from-avatar-url-96="http://24.media.tumblr.com/avatar_60558c779fa4_96.png" reblogged-from-avatar-url-128="http://26.media.tumblr.com/avatar_60558c779fa4_128.png" reblogged-from-avatar-url-512="http://27.media.tumblr.com/avatar_60558c779fa4_512.png" reblogged-root-url="http://1oyenmanzyu.tumblr.com/post/14139551463/amazing-street-art-with-urban-knitting-2819-29-jpg" reblogged-root-name="1oyenmanzyu" reblogged-root-title="xxxxJPGxxxx!!!!!" reblogged-root-avatar-url-16="http://24.media.tumblr.com/avatar_0ca81cf0c34f_16.png" reblogged-root-avatar-url-24="http://28.media.tumblr.com/avatar_0ca81cf0c34f_24.png" reblogged-root-avatar-url-30="http://29.media.tumblr.com/avatar_0ca81cf0c34f_30.png" reblogged-root-avatar-url-40="http://25.media.tumblr.com/avatar_0ca81cf0c34f_40.png" reblogged-root-avatar-url-48="http://28.media.tumblr.com/avatar_0ca81cf0c34f_48.png" reblogged-root-avatar-url-64="http://26.media.tumblr.com/avatar_0ca81cf0c34f_64.png" reblogged-root-avatar-url-96="http://30.media.tumblr.com/avatar_0ca81cf0c34f_96.png" reblogged-root-avatar-url-128="http://24.media.tumblr.com/avatar_0ca81cf0c34f_128.png" reblogged-root-avatar-url-512="http://24.media.tumblr.com/avatar_0ca81cf0c34f_512.png" width="920" height="600">

root-
14139551463


