

project name junkie
廃人

Goal
 非同期書き込み非同期読み込み、重複contentなしのtumblr client


作る話:
 pythonを使う
 なんでもいいのだがプラットフォームを選ぶのは嫌だ。
  Qt, wxpython とかか？

 - Downloading PyQt-x11-gpl-4.8.6.tar.gz (9.7Mb): 9.7Mb downloaded
  packagingがおかしくてinstallに失敗する。

 - wxpythonをyumでinstall してwx htmlとか



同期でsingle windowのclientを試作する。


pumblrはいいのかもしれないが、非同期じゃない。
modelの部分を作るためにtubmrl apiを理解する上で読むのはおおいにあり。
=> かなりシンプル。


http://www.tumblr.com/docs/en/api
http://lxml.de/xpathxslt.html

xmlを連結し、styleを入れてブラウザでレンダリングというモデルにするのか,
それとも
postごとにレンダリングしてpaneとみなすべきなのか。


renderするときに使うデータをprefetchすればいい。
別processにする？fetcherともいうべきかな
ローカルのファイルもしくはメモリで保持。

 方針：
  - requestに充分先行してfetchをかける。
  - requestしたときに手元にないものは諦める。

 - requestしたものが使えるようになるまでの時間を記録して予測に使えるようにすべきだろう。
  ざっくりと見た感じでは、
   xx.media.tumblrは速い。1s以内 i.e. 25.media.tumblr.com => akamai.
   www.tumblr.com/photo...は遅い。 => 本家
  とりあえず3秒前に読み込め。

 - wx.html.windowの仕様でfileからしかimgを読み込めないようだ。
   とりあえずメモリ渡しはできないように見える。
   
 - renderを作るのがよいか？


twitterのpicsはa hrefで参照されているがこれも解決してembedするほうがよいだろう。
-> そういうことはいっぱいあるのではないか？
 need to name this idea. expand?

htmlのsubsetだが相当「方言」になるなぁ。mark upとして整ってもいないだろう。


fetchするときのUAとかAcceptとか・・・まああとでいいでしょう。


postのidでpostをdictにほうりこんで管理。
time-stampでも管理したい。(シーケンシャルな取得)
 heapqにするか？


Junkie's Guideにいれること。
http://www.kurihama-alcoholism-center.jp/tiar/


twisted.webにあるproxyを起点にするのが良さそう。



----------------------------------------
in proxy.py
from twisted.web import proxy, http
class ProxyFactory(http.HTTPFactory):
    protocol = proxy.Proxy
----------------------------------------
in twisted/web/proxy.py
class Proxy(HTTPChannel):
    requestFactory = ProxyRequest
----------------------------------------
うーん、HTTPChannel classがもっているclass memberをみたほうが良さそう。
----------------------------------------
親クラスは、LineReceiver

http://twistedmatrix.com/documents/11.0.0/api/twisted.protocols.basic.LineReceiver.html
A protocol that receives lines and/or raw data, depending on mode.

In line mode, each line that's received becomes a callback to lineReceived. In
raw data mode, each chunk of raw data becomes a callback to rawDataReceived.
The setLineMode and setRawMode methods switch between the two modes.


さらに元をたどると、IProtocolを実装している。
http://twistedmatrix.com/documents/11.0.0/api/twisted.internet.interfaces.IProtocol.html
IProtocol(Interface)
def dataReceived(data): (source) 
def connectionLost(reason): (source) 
def makeConnection(transport): (source)
def connectionMade(): (source)

call graphのようなものが欲しいのだが・・・


class Request:
    def requestReceived(self, command, path, version):
   	... 
        self.process()

class ProxyRequest(Request):
    def process(self):
が差分。


        class_ = self.protocols[protocol]
        clientFactory = class_(self.method, rest, self.clientproto, headers,
                               s, self)

とかなんだろう？
protocolは'http'という文字列。
    protocols = {'http': ProxyClientFactory}
なので、ProxyFactoryをみればいい。



class ProxyClientFactory(ClientFactory):
    protocol = ProxyClient
で大半はProxyClient転送されている。
ProxyClient自体に手をいれるのではなく、継承してPrefetchProxyClientでも実装して、
ごにょごにょですかね。
=>> ProxyRequestのようだ。


手を入れたときのログ。 stdout自体がhookされている模様。

2011-11-19 19:46:42+0900 [-] Log opened.
2011-11-19 19:46:42+0900 [-] __main__.PrefetchProxyFactory starting on 8080
2011-11-19 19:46:42+0900 [-] Starting factory <__main__.PrefetchProxyFactory instance at 0x191ff38>
2011-11-19 19:46:50+0900 [PrefetchProxy,0,127.0.0.1] http://www.tumblr.com/dashboard
2011-11-19 19:46:50+0900 [PrefetchProxy,0,127.0.0.1] www.tumblr.com
2011-11-19 19:46:50+0900 [PrefetchProxy,0,127.0.0.1] plug in
2011-11-19 19:46:50+0900 [PrefetchProxy,0,127.0.0.1] Starting factory <__main__.PrefetchProxyClientFactory instance at 0x1d29320>
2011-11-19 19:46:51+0900 [PrefetchProxyClient,client] 127.0.0.1 - - [19/Nov/2011:10:46:50 +0000] "GET http://www.tumblr.com/dashboard HTTP/1.1" 200 13464 "http://www.tumblr.com/tagged/animals" "Mozilla/5.0 (X11; Linux x86_64; rv:8.0) Gecko/20100101 Firefox/8.0"
2011-11-19 19:46:51+0900 [PrefetchProxyClient,client] Stopping factory <__main__.PrefetchProxyClientFactory instance at 0x1d29320>


